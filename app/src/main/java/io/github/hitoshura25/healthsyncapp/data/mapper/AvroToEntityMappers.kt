package io.github.hitoshura25.healthsyncapp.data.mapper

// Avro DTO imports
import io.github.hitoshura25.healthsyncapp.avro.AvroBloodGlucoseRecord
import io.github.hitoshura25.healthsyncapp.avro.AvroHeartRateRecord
import io.github.hitoshura25.healthsyncapp.avro.AvroSleepSessionRecord
import io.github.hitoshura25.healthsyncapp.avro.AvroSleepStageRecord
import io.github.hitoshura25.healthsyncapp.avro.AvroStepsRecord
// Avro Enums
import io.github.hitoshura25.healthsyncapp.avro.AvroBloodGlucoseMealType
import io.github.hitoshura25.healthsyncapp.avro.AvroBloodGlucoseRelationToMeal
import io.github.hitoshura25.healthsyncapp.avro.AvroBloodGlucoseSpecimenSource
import io.github.hitoshura25.healthsyncapp.avro.AvroSleepStageType

// Room Entity imports
import io.github.hitoshura25.healthsyncapp.data.local.database.entity.BloodGlucoseEntity
import io.github.hitoshura25.healthsyncapp.data.local.database.entity.HeartRateSampleEntity
import io.github.hitoshura25.healthsyncapp.data.local.database.entity.SleepSessionEntity
import io.github.hitoshura25.healthsyncapp.data.local.database.entity.SleepStageEntity
import io.github.hitoshura25.healthsyncapp.data.local.database.entity.StepsRecordEntity

// --- Steps ---
fun AvroStepsRecord.toStepsRecordEntity(): StepsRecordEntity {
    return StepsRecordEntity(
        hcUid = this.metadata.id,
        count = this.count,
        startTimeEpochMillis = this.startTimeEpochMillis,
        endTimeEpochMillis = this.endTimeEpochMillis,
        zoneOffsetId = this.startZoneOffsetId,
        appRecordFetchTimeEpochMillis = this.appRecordFetchTimeEpochMillis,
        dataOriginPackageName = this.metadata.dataOriginPackageName,
        hcLastModifiedTimeEpochMillis = this.metadata.lastModifiedTimeEpochMillis,
        clientRecordId = this.metadata.clientRecordId,
        clientRecordVersion = this.metadata.clientRecordVersion,
        deviceManufacturer = this.metadata.device?.manufacturer,
        deviceModel = this.metadata.device?.model,
        deviceType = this.metadata.device?.type
    )
}

// --- Heart Rate ---
fun AvroHeartRateRecord.toHeartRateSampleEntities(): List<HeartRateSampleEntity> {
    val parentRecordMetadata = this.metadata
    val recordFetchedAtTime = this.appRecordFetchTimeEpochMillis
    val sessionStartZoneOffsetId = this.startZoneOffsetId

    return this.samples.map { avroSample ->
        HeartRateSampleEntity(
            hcRecordUid = parentRecordMetadata.id,
            sampleTimeEpochMillis = avroSample.timeEpochMillis,
            beatsPerMinute = avroSample.beatsPerMinute,
            zoneOffsetId = sessionStartZoneOffsetId,
            appRecordFetchTimeEpochMillis = recordFetchedAtTime,
            dataOriginPackageName = parentRecordMetadata.dataOriginPackageName,
            hcLastModifiedTimeEpochMillis = parentRecordMetadata.lastModifiedTimeEpochMillis,
            clientRecordId = parentRecordMetadata.clientRecordId,
            clientRecordVersion = parentRecordMetadata.clientRecordVersion,
            deviceManufacturer = parentRecordMetadata.device?.manufacturer,
            deviceModel = parentRecordMetadata.device?.model,
            deviceType = parentRecordMetadata.device?.type
        )
    }
}

// --- Sleep Stage (New Mapper) ---
fun AvroSleepStageRecord.toSleepStageEntity(sessionHcUidParam: String): SleepStageEntity {
    return SleepStageEntity(
        // id is auto-generated by Room
        sessionHcUid = sessionHcUidParam, // Foreign key to the parent SleepSessionEntity
        startTimeEpochMillis = this.startTimeEpochMillis,
        endTimeEpochMillis = this.endTimeEpochMillis,
        stage = this.stage.name // Mapping AvroSleepStageType enum to its String name
    )
}

// --- Sleep Session ---
fun AvroSleepSessionRecord.toSleepSessionEntity(): SleepSessionEntity {
    return SleepSessionEntity(
        hcUid = this.metadata.id,
        title = this.title,
        notes = this.notes,
        startTimeEpochMillis = this.startTimeEpochMillis,
        startZoneOffsetId = this.startZoneOffsetId,
        endTimeEpochMillis = this.endTimeEpochMillis,
        endZoneOffsetId = this.endZoneOffsetId,
        durationMillis = this.durationMillis,
        appRecordFetchTimeEpochMillis = this.appRecordFetchTimeEpochMillis,
        dataOriginPackageName = this.metadata.dataOriginPackageName,
        hcLastModifiedTimeEpochMillis = this.metadata.lastModifiedTimeEpochMillis,
        clientRecordId = this.metadata.clientRecordId,
        clientRecordVersion = this.metadata.clientRecordVersion,
        deviceManufacturer = this.metadata.device?.manufacturer,
        deviceModel = this.metadata.device?.model,
        deviceType = this.metadata.device?.type
    )
}

// --- Blood Glucose ---

private fun mapSpecimenSourceToInt(avroSpecimenSource: AvroBloodGlucoseSpecimenSource): Int {
    return when (avroSpecimenSource) {
        AvroBloodGlucoseSpecimenSource.INTERSTITIAL_FLUID -> 1
        AvroBloodGlucoseSpecimenSource.CAPILLARY_BLOOD -> 2
        AvroBloodGlucoseSpecimenSource.PLASMA -> 3
        AvroBloodGlucoseSpecimenSource.SERUM -> 4
        AvroBloodGlucoseSpecimenSource.TEARS -> 5
        AvroBloodGlucoseSpecimenSource.WHOLE_BLOOD -> 6
        AvroBloodGlucoseSpecimenSource.UNKNOWN -> 0
    }
}

private fun mapMealTypeToInt(avroMealType: AvroBloodGlucoseMealType): Int {
    return when (avroMealType) {
        AvroBloodGlucoseMealType.BREAKFAST -> 1
        AvroBloodGlucoseMealType.LUNCH -> 2
        AvroBloodGlucoseMealType.DINNER -> 3
        AvroBloodGlucoseMealType.SNACK -> 4
        AvroBloodGlucoseMealType.UNKNOWN -> 0
    }
}

private fun mapRelationToMealToInt(avroRelationToMeal: AvroBloodGlucoseRelationToMeal): Int {
    return when (avroRelationToMeal) {
        AvroBloodGlucoseRelationToMeal.GENERAL -> 1
        AvroBloodGlucoseRelationToMeal.FASTING -> 2
        AvroBloodGlucoseRelationToMeal.BEFORE_MEAL -> 3
        AvroBloodGlucoseRelationToMeal.AFTER_MEAL -> 4
        AvroBloodGlucoseRelationToMeal.UNKNOWN -> 0
    }
}

fun AvroBloodGlucoseRecord.toBloodGlucoseEntity(): BloodGlucoseEntity {
    return BloodGlucoseEntity(
        hcUid = this.metadata.id,
        timeEpochMillis = this.timeEpochMillis,
        zoneOffsetId = this.zoneOffsetId,
        levelInMilligramsPerDeciliter = this.levelInMilligramsPerDeciliter,
        specimenSource = mapSpecimenSourceToInt(this.specimenSource),
        mealType = mapMealTypeToInt(this.mealType),
        relationToMeal = mapRelationToMealToInt(this.relationToMeal),
        dataOriginPackageName = this.metadata.dataOriginPackageName,
        hcLastModifiedTimeEpochMillis = this.metadata.lastModifiedTimeEpochMillis,
        clientRecordId = this.metadata.clientRecordId,
        clientRecordVersion = this.metadata.clientRecordVersion,
        appRecordFetchTimeEpochMillis = this.appRecordFetchTimeEpochMillis,
        deviceManufacturer = this.metadata.device?.manufacturer,
        deviceModel = this.metadata.device?.model,
        deviceType = this.metadata.device?.type
    )
}